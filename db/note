
 sudo apt-get install mysql-server -y
 sudo mysql_secure_installation

 mysql --user root --password
 create database <database_name>;
 create user '<user>'@'localhost' identified by 'password';
 grant all on testdb.* to 'testuser' [identified by 'password'];

 use <database_name>;
 create table customers(costumer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name TEXT, second_name TEXT);

 # reset password
 sudo systemctl stop mysql
 mysqld_safe --skip-grant-tables &

 mysql -u root
 use mysql
 update user set password=PASSWORD('pass') WHERE user='root';

 # access denied for root@localhost
 UPDATE mysql.user SET plugin = 'mysql_native_password', password = PASSWORD('pass') WHERE user='root';

 \P <less|more>
 \G format output

 Examples:

  mysql -u root -p -h <host> <database>


 Useful command line options:

 	--print-defaults		Print the program argument and exit


 MySQL can be started manually using mysqld. To dump current startup options run `mysql --print-defaults'.
 
 Default options are read from the following files in the given order:
 	/etc/my.cnf
	/etc/mysql.cnf
	~/.my.cnf

 To setup pager to be set by default at a program startup add following entry to one of the files described above:

 	pager = more			// more(1) is used as an example any other pager can be used

 To set pager from within interactive session, use:
 	
  PAGER <program>

 To disable pager, run:
 	
	NOPAGER

 MySQL Commands. Quick Reference.


 	TEE filename;       
			// log session into filename


 Allow remote connect to mariadb:

 modify /etc/my.cnf.d/server.cnf

 * allow remote login bind address

 firewall-cmd -add-port=3306/tcp

 firewall-cmd --runtime-to-permanent

 GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.100.%' IDENTIFIED BY 'my-new-password' WITH GRANT OPTION;

 Set an lower_case_table_names=1 in /etc/my.cnf.d/server.cnf (not for a client) so SQL Manager will be incasesensitive (Ctrl+Shift+S).

 DDL, DML, DCL and TCL


 [SQL COMMANDS] 
	
	CREATE TABLE tbl_name (col_def..., PRIMARY KEY(col_name))

	ALTER TABLE tbl_name 
		MODIFY col_name DATA_TYPE
		CHANGE col_name col_name DATATYPE			- rename?
		#RENAME COLUMN col_name col_name
  ALTER TABLE tbl_name ADD [COLUMN] col1_name col1_definition [FIRST|AFTER col_name];     

	UPDATE tbl_name SET field = value [, field = value] ...
		[WHERE clause]

	DROP [TEMPORARY] TABLE [IF EXISTS]
		tbl_name [, tbl_name] ...
		[RESTRICT|CASCADE]

	SHOW {DATABASES | SCHEMAS}
		[LIKE 'pattern' | WHERE expr]

		 if the server was started with the --skip-show-database option, statement can not be used unless
		 SHOW DATABASES privelege is set


	SELECT 
		[ALL | DISTINCT | DISTINCTROW]
		[HIGH_PRIORITY]
		[STRAIGHT_JOIN]

	
	***

	Examples:
		
	 Change column name:

		ALTER TABLE tbl_name CHANGE col_name col_name DATA_TYPE

	 
	 Add a column:

 	ALTER TABLE tbl_name ADD PRIMARY KEY(col_name);            
  																				// add primary key index

  ALTER TABLE tbl_name ADD UNIQUE [idx_name] (col_name);  
																					// add a unique index

  ALTER TABLE tbl_name MODIFY col_name col_definition;        
																					// change column definitions


  CREATE tbl_name DEFAULT CHARSET utf8 COLLATE utf8_unicode_ci;   
																					// create table and specify the collation

	DROP 
  SHOW CHARACTER SET;
							// print default collation for the character set

  SELECT * FROM information_schema.SCHEMATA;   
																					// print default character set and collations for the databases

  SELECT table_name,engine FROM information_schema.TABLES WHERE table_schema = 'database_name';   
																					// check database engine (MySQL)

 	SELECT * FROM sqlite_master;   
							// SQLite equivalent of SHOW TABLES;

  SELECT * FROM table HAVING COUNT condition;     
							// check for a duplicates example

  SELECT * FROM MetaData;          
							// Get SQL version used by the server

 	UPDATE tbl_name SET col_name = 'value' WHERE ....;                i
							// update column value

	
	SELECT * FROM information_schema.tables WHERE table_name LIKE "project%"
