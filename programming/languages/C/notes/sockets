
 Sockets can be one of the:
   Â·	nameless (both local and remote sockets has no address), anonymous (local socket has no address) or generated (address for the local socket gets generated
	 Â·
 automatically).

 Each communication protocol specifies its own format for its networking address. Consequently, the address family is used to indicate which type of addressing is being used.
 Within one address family it might be a variations of addressing types.

 struct sockaddr	/* Generic data structure. */
 	{
		__SOCKADDR_COMMON(sa_);		/* Common data address family and length. */
		char sa_data[14];			/* Address data. */
	}

 Generic definitions of struct sockaddr_* common members are found in /usr/include/x86_64-linux-gnu/bits/sockaddr.h header file.  The __SOCKADDR_COMMON macro is used to declare initial
 common members of the data types used for socket addresses:

 #define _SOCKADDR_COMMON(sa_prefix)	sa_family_t 	sa_prefix		
								 		 \_  unsigned short integer type

 The total structure size is 16. Remaining 14 bytes are address information.

 All the address must define sa_family member in exactly the same location in the structure, because this element determines how the remaining bytes of the structure are interpreted.

 Traditionaly the local address family has been referred to as the AF_UNIX domain. This is because this addresses use the local UNIX filenames to act as the socket name. The
 structure name for AF_LOCAL or AF_UNIX addresses is sockaddr_un.

 struct sockaddr_un	/* Structure describing the address of an AF_LOCAL (aka AF_UNIX) socket. */
 	{
		__SOCKADDR_COMMON(sun_);	/* Address family. */
		char sun_path[108];			/* Path name. */
	}

 The structure member sun_family must have a value of AF_LOCAL or AF_UNIX. This value indicates the structure is formatted according to the sockaddr_un rules. The structure member sun_path[108] 
 contains a valid UNIX pathname. [!] There is no NULL byte required at the end of the character array.
/* Evaluate to actual length of the `sockaddr_un' structure.  */
# define SUN_LEN(ptr) ((size_t) (((struct sockaddr_un *) 0)->sun_path)	      \
		      + strlen ((ptr)->sun_path))
