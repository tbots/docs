
 First, found on all the functions is 
  push %ebp

 ----------------------- stack

  0xbffff4a8: $ebp			<--- $esp


  mov	%esp, %ebp

 ----------------------- stack

  0xbffff490: $ebp			<--- $esp


  and 0xfffffff0, 0xbffff4a8
										# esp get substracted by eight

	
 ----------------------- stack

	0xbffff4a8:	ebp
	0xbffff4a4:
  0xbffff4a0: <--- esp

	 
	subl 0x10, %esp
										# esp substracted by sixteen
	
 ----------------------- stack

	0xbffff4a8:	ebp
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	<--- esp


  
	if(argc < 2) 

  	cmpl $0x1, 0x8(%ebp)

  if argc is less than two
	if argc is greater than one )

	need to think about it


  so count of arguments stored eight bytes above %ebp


	jg 0x804857c
	mov 0xc(%ebp),%eax			# 0xbffff554		- pointer to the first element
	addl $0x4, %eax					# 0xbffff558		- advance to the second element
													# the same could be achieved with the 
													#  mov 0x10(%ebp), %eax
													# but doing
													#  mov 0xc(%ebp), %eax 
													# will provide us with constant reference to the zero element
	
  mov (%eax), %eax				# copy pointer
	mov %eax, (%esp)				# thus the first local variable

 ----------------------- stack

	0xbffff4b4:	argv[0]
	0xbffff4b0: argc
  0xbffff4ac: 
	0xbffff4a8:	ebp
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	eax 	<--- esp

	 note: the first local variable was pushed in offset of 24 bytes; 

	
	call 0x80484ec <check_authentication>

 ----------------------- stack

	0xbffff4b4:	argv[0]
	0xbffff4b0: argc
  0xbffff4ac: 
	0xbffff4a8:	ebp
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	eax 	
	0xbffff48c: ret    <--- esp


	push %ebp
  mov  %esp,%ebp
 ----------------------- stack

	0xbffff4b4:	argv[0]
	0xbffff4b0: argc
  0xbffff4ac: 
	0xbffff4a8:	[old ebp]
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	eax 	
	0xbffff48c: ret 
	0xbffff488: ebp			<--- esp


	sub  0x38,%esp
 ----------------------- stack

	0xbffff4b4:	argv[0]
	0xbffff4b0: argc
  0xbffff4ac: 
	0xbffff4a8:	[old ebp]
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	eax 	
	0xbffff48c: ret 
	0xbffff488: ebp			
	0xbffff484:
	0xbffff480:
	0xbffff47c:
	0xbffff478:
	0xbffff474:
	0xbffff470:
	0xbffff46c:
	0xbffff468:
	0xbffff464:
	0xbffff460:
	0xbffff45c:
	0xbffff458:
	0xbffff454:
	0xbffff450: <--- esp


  movl $0x0, -0xc(%ebp)
 ----------------------- stack

	0xbffff4b4:	argv[0]
	0xbffff4b0: argc
  0xbffff4ac: 
	0xbffff4a8:	[old ebp]
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	eax 	
	0xbffff48c: ret 
	0xbffff488: ebp			
	0xbffff484:
	0xbffff480:
	0xbffff47c: $0x0
	0xbffff478:
	0xbffff474:
	0xbffff470:
	0xbffff46c:
	0xbffff468:
	0xbffff464:
	0xbffff460:
	0xbffff45c:
	0xbffff458:
	0xbffff454:
	0xbffff450: <--- esp


  movl 0x8(%ebp),%eax			# move the first local variable
	mov  %eax, 0x4(%esp)
	lea  -0x1c(%ebp), %eax	# load address into eax
	mov  %eax, (%esp)				# store eax; password_buffer
 ----------------------- stack

	0xbffff4b4:	argv[0]
	0xbffff4b0: argc
  0xbffff4ac: 
	0xbffff4a8:	old ebp
	0xbffff4a4:
  0xbffff4a0:
	0xbffff49c:
	0xbffff498:
	0xbffff494:
	0xbffff490:	eax 	
	0xbffff48c: ret 
	0xbffff488: ebp			
	0xbffff484:
	0xbffff480:
	0xbffff47c: $0x0 <--- auth_flag
	0xbffff478:
	0xbffff474:
	0xbffff470:
	0xbffff46c: <--- eax
	0xbffff468:
	0xbffff464:
	0xbffff460:
	0xbffff45c:
	0xbffff458:
	0xbffff454: "AAAAA"
	0xbffff450: $eax=0xbffff46c
