 
 The `docker-compose up` command will build, (re)create, start and attach containers to a service. Unless service are running and
 `--no-deps` was specified, this command also starts all linked services. If there is existing container for a service and service 
 configuration was changed, `docker-compose up` picks up the changes by stopping and recreating the containers, preserving mounted volumes.
 To prevent Compose from picking up the changes, use `--no-recreate` flag. To force Composer recreate containers use `--force-recreate`. 

 Docker Compose
  The "Compose" file is a YAML file defining services, networks and volumes. The default path for a "Compose" file is ./docker-compose.yml.


 [DIRECTIVE REFERENCE]

  container_name: <name>


  BUILD

    Configuration options that are applied at build time.
      
      build:
        context: ./vehiclemanagement-service
        dockerfile: Dockerfile
        args:
          buildno: 1


    If `image` is specified as well as build, then the Compose names the build image with the image name and optional tag, if specified.

  
  
  CONTEXT

    Either a path to a directory containing a Dockerfile, or a url to a git repository. Path is relative to Compose file directory.



  DOCKERFILE

    Alternate Dockerfile name found under build context.



  IMAGE

    Specify the image to start the container from. Can either be a repository/tag or partial image ID.

    If the image does not exist, Compose attempts to pull it, unless you have also specified build, in which case it builds it using the specified options and
    tags it with the specified tag.

  


  ARGS

    Add build arguments, which are environment variables accessible only during the build process. You can omit the value when specifying a build argument, in
    which case its value at build time is the value in the environment where compose is running.

 
 
  CACHE_FROM

    A list of images that the engine uses for cache resolution.



  LABELS

    Add metadata to the resulting image using Docker labels. Either array or a dictionary is allowed. 



  SHM_SIZE

    Set the size of the /dev/shm partition for this build's containers. Specify as an integer value representing the number of bytes or as string expressing a byte value.



  TARGET

    Build the specified stage as defined inside the Dockerfile.



  cap_add, cap_drop

    Add or drop container capabilities (man 7 capabilities).



  cgroup_parent

    Specify an optional parent cgroup for the container



  Deploy

    Specify configuration related to the deployment and running of services. This only takes effect when deploying to a swarm with `docker stack deploy`, and is
    ignored by `docker-compose up` and `docker compose run`.


   +Replicas

     If the service is replicated (which is the default), specify the number of containers that should be running at any given time.


   +Resources
     
     Configure resource constraints.


   +Restart Policy (restart_policy)
    
     Configures if and how to restart containers when they exit. Replicates `restart`.
      - condition   one of `more`, `on-failure` or `any` (default: any)
      - delay       how long to wait between restart attempts, specified as a duration (us,ms,s,m,h, default: 0)
      - max_attempts
                    how many times attempt to restart a container before giving up (default: never give up). If the restart does not succeed within
                    the configured window, this attempt doesn't count toward the configured max_attempts value. 
      - window      how long to wait before deciding if a restart has succeeded, specified as a duration (default: decide immediately)



 Creating services:

  docker-compose up --detach --force-recreate --build --always-recreate-deps
  docker-compose up -d --build        # build images before starting containers

 Run a single command in a container(service):
  
  docker-compose run <service> <command> [<args>...]


 List environment variables set in container:
  
  docker-compose run <service> env

 
 Remove containers and volumes:

  $ docker-compose down --volumes --rmi {all|local}


 version: '3'
 services:
    web:
      build: .
      ports:
        - "5000:5000"
      volumes:
        - .:/code     
      redis:
        image: "redis:alpine"

    ^
    ^
      in this example current directory `.` is mounted under `/code` directory inside a container allowing you to do direct modifications to the files without
      a need to recreate an image


 Directive reference:
  args
  build
  cache_from
  context
  container_name
  image
  ports
  volumes
  labels
  networks
  target
  logging
  environment
  env_file
  entrypoint
