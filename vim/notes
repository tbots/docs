

 Invocation.

	-p FILE...		open files in tabs on invocation
  -o FILE...    open file in separate windows (:args)


 Command line command.

	packadd
	scriptnames
	[address]@{0-9a-z".=*+}					" execute commands in a buffer as they were command-line commands
	split
	vsplit
	only      ; CTRL-w CTRL-O
	qall
	wall
	wqall
	qall!
	edit
	silent
	

[Normal mode]

	ga			print ASCII value of the character cursor is positioned at
	ge			end of the previous word
	gE			end of the previous word (non-blank jump)
	C_Z			suspend (run fg(1) to restore)
	
	args ## <file>		sort file in args list
	0				move to the beginning of the line
	^				moves to the first non-blank character
	$				takes a count - moves to the end of the next line
	
	;				repeat latest f, t, F or T [count] times
	,				repeat latest f, t, F or T in opposite direction
	
	*/#  		search for the word (exact match)
	g*/g#		search for the word (partial match)
	
	Ctrl-I	jump to the previous position in a file
	Ctrl-V	visual block search

	Ctrl-O	execute command in escape mode; will allow to stay in insert mode after recording for example

	Ctrl-R {register}		insert in contents of the clipboard
  Ctrl-R "						insert in contents of the last delete or yank


	'M			jump to the beginning of the marked line
	`M			jump to the marked character
	" 			last position in a file
	.				last edit in a file

  split
  vsplit
  splitbelow
  splitright


	CTRL-W w   jump to the next split
	CTRL-W H|J|K|L   move split

	:tabedit <filename>			add a new tab

	gt		go to the next tab
	gT		go to the previous tab


 Configuration files.

 /etc/vim/vimrc

 Configuration options:
 
 	ignorecase
 	ruler
	backup
	history
	helptags
	showcmd
	filetype-plugin-on
	sw
	et			# expand tab
	list
	listchars=tab:>-

 Command lines options:

 	-u <vimrc>			Use vimrc instead of any .vimrc

									vim -u NORC

										skips initializations without reading a file

									vim -u NONE

										also skips loading plugins





 VIM Script



  Loops.
 	
	 :while {condition} 
    :{statement} 
   :endw[hile]

     let i=1
     while i < 10
	    echo "i " i
     endw

    
   :for {var} in {list}
   :endfo{r}

	   for i in range(0..9)
	    ech "i " i
	   endfor


  Arithmetics.

   :let {variable} = {expression} 

    Set internal variable to the result of the expression. The variable will get the type
    from the expression. Value of the variable does not reset between evaluations in the
    same file(buffer).


  Echoing commands.

   :ec[ho] {expr1}...

    Echoes each expression, with a space in between. The first expression starts on a new line.
    If there is a new line in a form:
      :echo "word1" "\n" "word2"
    
    word2 is written on the new line with the space before, to avoid it write:
      :echo "word1" "\nword2"
    or
      :echo "word1\nword2"
      
    See `:h :echoh!` for output highlighting. 

    Examples:
      :echo "the value of the 'shell' is " &shell

	:for {var} in {list}
	:if
	:finish
	:echo [&command]
	:echoh
	:range
	:messages
	:&command " will not work out of echo

 	
	Comments (") are allowed 
	++ operator will not work
 :echo expand('$variable')
 :echo $variable
