
	Hosts and Users
		
	For each play in a playbook, you get to choose which machines in your infrastructure to target and what remote user to complete the steps (tasks) as.

	The generic form of playbook is as follows:

		hosts:		  			a list of one or more groups or host patterns, separated by colons
		remote_user:			<name of the user account
		order:						inventory|reverse_inventory|
		gather_facts: <bool>
    vars:
      <list>:
        <item>: <value>
        ...

       <list>:
         - {{ list }}

		tasks:
			- <task>:
				<variable>: <value>


	Ansible by default assumes that SSH keys are used for authentication. Private key will be searched under home directory of the user that invoked ansible-playbook. Set
  `ansible_ssh_private_key_file' value under vars section or pass `--private-key' option on the command line to specify an alternate key file path. User used for remote
  connection is set with `--user(-u)' option or by specifying a value to `remote_user' or `ansible_ssh_user' directive. To authenticate user with the password pass `--ask-pass(-k)'
  option on the command line. After logged into machine you can switch execution under another priveleged user account specified by `--become-user' with `--become' option 
  and force password prompt with `--ask-become-pass'.  Password to the sudo can be passed with the `ansible_become_pass' variable in plain text or using vault.

   - name: Installing apache2 and php
     hosts: abs
     remote_user: osergiyuk
     become_user: ansible
     become: yes
     vars:
       ansible_ssh_private_key_file: /home/osergiyuk/.ssh/id_rsa
       ansible_become_pass: child_In_Time3
       packages:
         - apache2

   $ ansible -i /home/osergiyuk/docs/ansible/hosts weekend --module-name ping --user osergiyuk --private-key /home/osergiyuk/.ssh/id_rsa

 	ansible(1) program is used to run a single task on the host(s). The usage is:

    ansible <host-pattern> [options]...

	Host can be a group name, individual host listed in inventory file or on the command line, or one of the `all' or `localhost' keywords.  Inventory file is specified 
  with `--inventory(-i)' (former --inventory-file) option as a single file or a comma-separated list.  Specify module name with `--module-name(-m)' and it's args with `--args(-a)' options.


   $ ansible all --user root \
	               --ask-pass \
	               --inventory localhost, hosts_file \
	               --module debug \
	               --args "msg={{ 'password' | password_hash('sha512', 'salt') }}"


  To see the list of the matching hosts run:
   $ ansible -i <inventory-file> --list-hosts <pattern> 
   
  or 
   $ ansible-playbook --list-hosts users.yml

  to see hosts specified in the playbook. Optionally use `--limit(-l)' for the host pattern to apply on entire inventory.
	 $ ansible east --list-hosts --limit='10.*' 

  To set additional variables as a key/value pair use `--extra(-e)' option.
   $ ansible localhost -m ping -e 'ansyble-python-interpreter=/usr/bin/python'

  Use --args(-a) to specify a module argument.


  Tasks.

  Each task can be tagged (--tags) and then referd to an invocation using task name.

    --start-at-task

    --step

		--syntax-check
				Perform a syntax check on the playbook but do not execute it


  Looping constructs.

   template:
     src="{{ item }}" dst=/etc/sudoers.d/"{{ item | basename }}"
   with_fileglob: [ 'templates/etc/sudoers.d/*' ]

 	 key: "{{ lookup( 'file', item ) }}"			# look like item is the default handler for the iterated item
	loop:
		- /path/to/file1
		- /path/to/file2

	key: "{{ item }}"
	with_file:
			- /path/to/file1
			- /path/to/file2

			key: "{{ lookup( 'pipe', 'cat /home/osergiyuk/.ssh/id_rsa*.pub' ) }}"

	user:
		name: "{{ item.name }}"
	with_flattened: "[ {{ansible}}, {{admins}} ]" 

	admins:
		- "{{ osergiyuk }}"

	osergiyuk:
		name: "Oleg"




  Tips.

    To avoid password prompting when running under priveleged user account edit a 'sudoers' file with the `NOPASS' option.


 Roles

  ansible-galaxy init base-line
	 
	 ./defaults -> main.yml				
	 ./files ->
	 ./templates
	 ./handlers
	 ./meta
	 ./tasks -> main.yml
	 ./vars
	
	The 'defaults' directory lists variable defaults that take lower precedence; if a variable is defined nowhere else, the
	definition given in defaults/main.yml will be used.

	The 'files' and 'templates' directories contain affiliated files and templates that are used within the role.

	The 'handlers' directory is used to store tasks that may be flagged during a play to run at the play's completition. 

	The 'meta' directory contains authorship information which is useful to publish a role on galaxy.ansible.com. It may 
	also be used to define role dependencies. Role dependency allows to require that other roles be installed prior to the 
	role in question.

	The 'tasks' directory is where most of your role will be written. This directory includes all the tasks that role will run. 
	Ideally, each logically related series of tasks would be laid out in their own files, and simply included through the main.yml
	file in the tasks directory.

	The 'vars' directory is where necessary valiables for your roles are defined. They are ment for internal use only.

	 Variable precedence:

	 /etc/ansible/host_vars/<host_name>
	  > /etc/ansible/roles/<role_name>/vars/main.yml?


	*task syntax*
		copy:
			src=./file/<filename> <-

		template: 

			src=<path_to_j2_template>

				
			dest=<remote_path>

			owner=
				Name of the user that should own a the file/directory, as would be fed to chown?try root:

			mode=
				
		service:
			state:
			name:
			enabled:


		when: ( ansible_os_family=Debian|CentOS AND
						ansible_distribution_majon_version == '7' AND
					  ansible_fqdn [!]= 'fqdn' )



	/etc/ansible/hosts file syntax examples


	 [group_name]
	 host[:port]

	 [range_start:range_end]

	 localhost              ansible_connection=local
	 other1.example.com     ansible_connection=ssh        ansible_user=mpdehaan
	 host1 http_port=80 maxRequestsPerChild=808

	 Group variables

	 [atlanta]
	 server1
	 server2
	 
	 [berlin]
	 b1
	 b2

	 [atlanta:vars]
	 ansible_connection=local
	 ansible_user=root
	 http_port=80
	 maxRequestsPerChild=808]
	 ntp_server=ntp.atlanta.example.com
	 proxy=proxy.atlanta.example.com

	 [all:children]
	 atlanta
	 berlin

	 [all:vars]
	 some_server=server1	DEFINE
	 halon_system_timeout=30
	 self_destruct_countdown=60
	 escape_pods=2


 Examples:

 Copy files:
 	-m copy -a 'src=/src dest=/dest'

 Change file permissions:

	-m file -a 'dest=/dest mode=600 owner= group'
	-m file -a 'dest=/dir state=absent'

	state			directory	//create directory

	Limited background operations

	ansible-galaxy 

			

		The things listed in the notify section of a task are called handlers. Note 'listen' attribute.

	All or * are equivalent	

	group:second_group
	group:!second_group

	group:second_group:&third_group:!fourh_group
		
		all machines from the group and second_group are to be managed if in third group but not in fourh_group

	group[-1] group[1:] 

	~extended_regexp

	--limit string
	@ assumes filename



 Variables.

	inventory_hostname

   ansible -m setup <host>
	 

	 examples:

	 	- hosts: all
			gather_facts: false
			tasks:
				- debug:
					var: inventory_hostname

