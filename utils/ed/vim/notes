
*Invocation

	-p FILE...		open files in tabs on invocation
  -o FILE...    open file in separate windows (:args)
 	-u <vimrc>		use vimrc instead of any .vimrc
	-u NORC 			skips initializations without reading a file
	-u NONE 			also skips loading plugins

 
*Splitting windows
  
 :split 
 :vsplit 
 :splitbelow 

 To make window appear from the right on `vsplit' set option: 'splitright'

 To quickly check option value:
 :echo &splitright

 To set an option:
 :set splitright

 or
 :let &splitright=1

 To unset an option:
 :set nosplitright

 Use the following to toggle option value:
 :set splitright !

 CTRL-W <w>       jump to the next split
 CTRL-<H|J|K|L>  move split

	:tabedit <filename>			add a new tab

	gt		go to the next tab
	gT		go to the previous tab

*Indenting text

 'shiftwidth' option value is the space number used for autoindent

 When 0 defaults to value of 'ts'.

 Can get it's value with:
  :echo shiftwidth()
  

===========================
Command line command (:cmd)
===========================

To copy/yank text in a register:
	:[range]y[ank] [x]
---

To put the text from a register (default to the " register) after a line (defaults to current line):
	:[line]pu[t] [x]
---

packadd
---

scriptnames
---

To execute commands stored in a buffer:
	:[address]@{0-9a-z".=*+}					

Default register is "
---


	split
	vsplit
	only      ; CTRL-w CTRL-O
	qall
	wall
	wqall
	qall!
	edit
	silent
	

[Normal mode]

	ga			print ASCII value of the character cursor is positioned at
	ge			end of the previous word
	gE			end of the previous word (non-blank jump)
	C_Z			suspend (run fg(1) to restore)
	
	args ## <file>		sort file in args list
	0				move to the beginning of the line
	^				moves to the first non-blank character
	$				takes a count - moves to the end of the next line
	
	;				repeat latest f, t, F or T [count] times
	,				repeat latest f, t, F or T in opposite direction
	
	*/#  		search for the word (exact match)
	g*/g#		search for the word (partial match)
	
	Ctrl-I	jump to the previous position in a file
	Ctrl-V	visual block search

	Ctrl-O	execute command in escape mode; will allow to stay in insert mode after recording for example

	Ctrl-R {register}		insert in contents of the clipboard
  Ctrl-R "						insert in contents of the last delete or yank


	'M			jump to the beginning of the marked line
	`M			jump to the marked character
	" 			last position in a file
	.				last edit in a file

=================
= CONFIGURATION =
=================
 
To see all file sourced:

 :scriptnames


 The main configuration file is "/etc/vim/vimrc", that in turn sources "~/.vimrc".

 To see currently set options:
	:set [all]

 Common configuration options:
 
 	ignorecase
 	ruler
	backup
	history
	helptags
	showcmd
	filetype-plugin-on
	sw
	et			# expand tab
	list
	listchars=tab:>-


 To check for a feature, if set, use has() function. To see all the features: ":help feature-list"



==========
= SYNTAX =
==========


Syntax files:

 $VIMRUNTIME/syntax/syntax.vim
 $VIMRUNTIME/filetype.vim
 $VIMRUNTIME/syntax/synload.vim
 $VIMRUNTIME/plugin 
 $VIMRUNTIME/ftplugin

 See defined colors in "$VIMRUNTIME/colors" directory. Test colors by running a ":runtime syntax/colortest.vim" command

 Enable syntax highlighting by running ':syntax enable'. The command is equivalent to "source $VIMRUNTIME/syntax/syntax.vim",
 this file is used for ":syntax on" and it installs the autocommands and starts highlighting for all buffers.

 To see currently defined items:
 	
	:sy[ntax] [list [group-name]]

 To see all the currently active highlighting groups, run 
 	
	:source $VIMRUNTIME/syntax/hitest.vim


 Case match for syntax items can be ignored with the
 	:syntax case match
 	:syntax case ignore


 References:
 	syntax.txt	-> :syn-qstart
	usr_44.txt

 Commands in syntax.vim -> exe, so, runtime, au, set, let, unlet,

 See echoh
	If :echohl WarningMsg, the group is used now for the following :echo, :echon, and echomsg commands (also used for
	the input() prompt.

 To see all the set options on the file:
