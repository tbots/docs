
 Arrays.

  To initialize an array, use the following syntax:
    $arr = [ ' ',...
  To convert string to array use explode() function. The definition is:

	  array explode ( string $delimiter, string $string [, int $limit = PHP_INT_MAX] )
      
	explode() returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by
	the delimiter. 

  Vice versa, implode() function will join array elements in a string, optionally separating them by delimiter:
 
 	  string implode([string $delimiter, ]array $elements);

  To get a slice of array elements use array_slice(). The definition is:
    array array_slice(array $array, int $offset[, int $length = NULL[, bool $preserve_keys = FALSE ]]);

  array and length


 /* Filesystem functions */

  string basename ( string $path [, string $suffix ] );

      Returns trailing name component of path, optionally removing an $suffix from the end of the path component.


  The pathinfo() function will returned essential elements of the pathspec. The definition is:

    mixed pathinfo( string $path[, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME );
    
    


 Error-handling functions.

  error_get_last()

 	
	is_null();
	printf()
	print()
	strtolower()
	strtoupper()
	strlen()
	var_dump()

 array array( [ mixed $...] )

 	Creates an array.

 
 int array_push ( array &$array [, mixed $... ] )

  Push...


 unset()

 array array( [ mixed $...] )

 	Creates an array. Syntax "index => values", separated by commas, define index and values. index may be of type string or integer. When index is omitted 
	and integer index is automatically generatd, starting at 0. If index is an integer, next generated index will be the biggest integer index + 1. Having
	a trailing comma after the last defined array entry is a valid syntax. 

 array str_split( string $string [, int $split_length = 1] )	- converts a string into array

 array preg_split( string $pattern, string $subject [, int $limit = -1 [, int $flags = 0 ]] )
 								split the given string by a regular expression

								limit  if specified, the only substring up to limit are returned with the rest of the string being placed in the
								last substring. A limit of -1 or 0 means "no limit" and, as is standard across PHP, NULL can be used to skip to the
								flags  parameter.

 int array_push ( array &$array [, mixed $... ] )

  Push...


 int count ( mixed $array_or_countable [, int $mode = COUNT_NORMAL] )

 	Counts all elements in an array, or something in an object.

 unset()



 String functions.

  string substr( string $string, int $start [, int $length] );

                Returns portion of string specified by the start and length parameters.
                
                
	string trim( string $str [, string $character_mask = " \t\n\r\0\x0B" ] );

                Returns a string with whitespace stripped from the beginning and end of str. Second parameter is an optional character
                string to stripped.


	ltrim()
	rtrim()
	ucfirst()
	ucwords()
	substr() ?




 Variable handling functions.

  float floatval( mixed $var );
                
                Gets float value of the variable.

  int intval( mixed $var [, int $base = 10 ] );

                Get integer value of a variable

  string strval( mixed $var );

                Get string value of a variable


 + Type conversion

  bool settype( mixed &$var, string $type );

                Set the type of variable to type


 Time.

  To get any of the time representations first use time() function to get a UNIX timestamp (number of seconds since 1970 00:00:00 GMT) for the current or relative time and then pass it
  to any of the available formatting functions (i.e. date()).

  strtotime() function is used to get a timestamp with respect to the current or relative time. The function definition is:
    int strtotime( string $time [. int $now = time() ]);

  The $time argument is a string that accepts time notations in the following formats:

    dayname     'sunday' 'monday' 'wednesday' 'thursday' 'friday' 'saturday' 'sun' 'mon' 'tue' 'wed' 'thu' 'fri' 'sat'
    daytext     'weekday' 'weekdays'
    number      [+-]?[0-9]+
    ordinal     'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh',
                'next', 'last', 'previous', 'this'

    m           january [please continue..]
    YY          [0-9]{4}

    ordinal dayname 'of' m YY

  Note that Saturday and Sunday are not counted as a weekdays when relative date is specified, i.e. if current day is Thursay, the "+3 weekdays" statement will 
  jump over Sat and Sun, and result in Tuesday to be returned.

  date() function conversely will convert Unix timestamp to the human readable representation of the date/time. FOllowing is the list of possible format symbols
  and their description:

 	  d				Day of the month                                              0[1-31]
    D       textual representation of the day                             Mon through Sun
    j       date of the month without leading zeros                       1 to 31
    l       A full textual representation of the week                     Monday through Sunday
    N       ISO-8601 numeric representation of the day of the week        1 (for Monday) through 7 (for Sunday)
    S       English ordinal suffix for the day of the month, 2 characters st,nd,rd, or th.
    W       Numeric representation of the day of the week                 0 (for Sunday) through 6 (for Saturday)
    F       A full textual representation of a Month                      January through December
    H       24-hour format of an hour with leading zeros                  00 through 23
    i       Minutes with leading zeros                                    00 to 59
    Y       A full numeric representation of the year                     1999,2003 etc.
