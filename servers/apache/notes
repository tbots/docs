

 		Administration

 "apache2ctl" script is designated for the apache2 server administration. Default enviornment variables for apache2ctl
 stored under "envvars" file. 

 "envvars" will set SUFFIX if directory is in form of "/etc/apache2-" (that is set accordingly by the /usr/sbin/apache2ctl
 and actually affected by the it's own name).

 Global variables:
 	APACHE_CONFDIR={/etc/apache2}			# /usr/sbin/apache2ctl
	APACHE_RUN_USER={www-data}				# /etc/apache2/envvars
	APACHE_RUN_GROUP={www-data}			
	APACHE_PID_FILE={/var/run/apache2$SUFFIX/apache2.pid}
	APACHE_RUN_DIR={/var/run/apache2$SUFFIX}
	APACHE_LOCK_DIR={/var/lock/apache2$SUFFIX}
	APACHE_LOG_DIR={/var/log/apache2$SUFFIX}
	SUFFIX=

 Mentioned files:
	/etc/apache2/envvars
 	/etc/init.d/apache2
	/usr/sbin/apache2ctl

 	
 Configuration.
 	
	Edit a conf/httpd.conf file
		LoadModule php7_module modules/libphp7.so
		LoadModule php5_module modules/libphp5.so

		<FilesMatches \.php$>
			SestHandler application/x-httpd-php
		</FilesMatches>

 Installing php7.0_module on Debian:

  php7.0 php-mysql  
 Usage.

 	PREFIX/bin/httpd -l 							list compiled-in modules


 {PROCEDURES]

  *Installing php from source

 	 # ./configure --with-apxs2=/usr/local/apache2/bin/apxs

	--with-config-file-path=PATH			Set the path in which to look for php.ini [PREFIX/lib]


 	*Installing apache2 from source.

  ./configure --enable-so

			--enable-so 			DSO capability. This module will automatically enabled
												unless you build all modules statically.

 	--prefix=/usr/local/apache2      default prefix



 [NOTES]
 
 Addresses on the Web are expressed with URLs - Uniform Resourse Locators - which specify a protocol (e.g. http), a servername (e.g. www.apache.org), a URL-path
 (e.g. /docs/current/getting-started.html), and possibly a query string (e.g. ?arg=value) used to pass additional arguments to the server.

 A client (e.g., a web browser) connects to a server (e.g., Apache HTTP Server), with the specified protocol, and makes a request for a resource using the URL-path.
 
 The URL-path may represent any number of contents on the server. It may be a file (like getting-setarted.html) a handler (like server-status) or some kind of
 program file (like index.php).

 The server will send a response consisting of a status code and, optionally, a response body. The status code indicates whether the request was successful, and if
 not, what kind of error was encountered. Client can be instructed how it should process the response.

 Details of the transaction, and any error conditions, are written to log files.

 In order to connect to a server, the client will first have to resolve the server name to an ip address (the location on the Internet where the server resides).
 Thus, in order for web server to be reachable, it is necessary that the servername will be in DNS list.

 More than one hostname may point to the same IP address, and more than one IP address can be attached to the same physical server. Thus, it is possible to run more
 than one web site on the same physical server using a feature called virtual hosts.

 The Apache HTTP server is configured via simple text files. Their localtion are varies depending on the way server was installed.
 
 The configuration is frequently broken into multiple smaller files for ease of management. These files are loaded via Include directive.

 The server is configured by placing cofiguration directives in these configuration files. A directive is a keyword followed by one or more arguments that set its
 value. 

 Configuation directive are placed under configuration sections depends on where the directives should be effective.

 In addtition to the main configuration files, certain directives may go in .htaccess files located in the content directories .htaccess files are primarily for
 people who do not have access to the main server configuration file(s).

 Web site content can take many different forms, but may be broadly divided into static and dynamic content.

 Static content is things like HTML files, image files, CSS files, etc. This files are resides on the file system. The DocumentRoot directive specifies where the
 files should reside. This directive is either set globally, or per virtual host.

 Typically, a document called index.html will be served when a directory is requested without a filename being specified. For example, if DocumentRoot is set to
 /var/www/html and a request is made for http://www.example.com/work/, the file /var/www/html/work/index.html will be served to the client.

 Dynamic content is anything that is generated at request time, and may change from one request to another. There are numerous ways that dynamic content may be
 generated. Various handlers are available to generate content. Third party modules like mod_php may be used to write code that does a variety of things.

 The location of the error log is defined by the "ErrorLog" directive. It can be set globally, or per virtual host. Each error log message contains an error code,
 which can be searched online for more detailed description of how to address the problem.


 [Virtual Host Support]

 IP-based virtual hosting is a method to apply different directives based on the IP address and port a request is received on. Most commonly, this is used to serve different websites 
 on different ports and interfaces, or using an ip aliases. With name-based virtual hosting, the server relies on the client to report the hostname as part of the HTTP headers. Using 
 this technique, many different hosts can share the same IP address. Name-based virtual hosting needs only DNS server to be configured to map each hostname to the correct IP address
 and then Apache to recognize different hostnames. Name-based virtual hosting builds off of the IP-based virtual host selection algorithm, meaning that searches for the 
 proper server name occur only between virtual hosts that have the best IP-based address. Using a wildcard(*) for the IP address in all of the VirtualHost directives makes ip-mapping
 irrelevant.

 When a request arrives, the server will find the best (most specific) matching <VirtualHost> argument based on the ip address and port used by the request. If there is more than one 
 virtual host containing this best match address and port combination, Apache will further compare the ServerName and ServerAlias directives to the server name present in the request.
 If ServerName directive is omitted from any name-based virtual host, the server will default to a fully qualified domain name (FQDN) derived from the system hostname. If no matching
 ServerName or ServerAlias is found in the set of virtual hosts containing the most specific matching IP address and port combination, the the first listed virtual host that matches
 will be used.

 There are two ways of configuring apache to support multiple hosts. Either by running a separate apache daemon for each hostname, or by running a single daemon which supports
 all the virtual hosts.

 

 [SECURITY]

 The authorization providers implemented by mod_authz_host are registered using the Require directive. The directive can be referenced within a <Directory>, <Files> or <Location>
 section as well as .htaccess files to control access to particular parts of the server. Access can be controlled based on the client hostname or IP address.

 In general, access restriction directives apply to all access methodes (GET, PUT, POST, etc.) This is the desired behavior in most cases. However it is possible to restrict some 
 methods, while leaving other methods unrestricted, by enclosing the directives in a <Limit> section.

 Apache's Require directive is used during authorization phase to ensure that a user is allowed or denied access to a resource. mod_authz_host extends the authorization types with ip,
 host, forward-dns and local. Other authorization types may also be used but may require that additional authorization modules be loaded. 

 The authorization providers affect which hosts can access an area of the server. Access can be controlled by hostname, ip address or ip address range. 


 [HANDLERS]

 Module indentifier: status_module
 		Provides an information on server activity and performance


 [CONFIGURATION DIRECTIVES]

 Include
	DocumentRoot

 <Directory "/var/www/html/localhost">

 	Options Indexes FollowSymlinks
	AllowOverride All
	Order Allow,Deny
 	Allow from All				# controls which hosts can access an area of the server
	Require all granted
	ServerAdmin email-address|URL (Context: server config, virtual host)
			Email address that the server includes in error messages sent to the client. If the apache2 doesn't recognize the supplied argument as an URL, it assumes that it is an email
			address and prepends it with "mailto:" in hyperlink targets. 

	ServerName [scheme://]domain-name|ip-address[:port] (Context: server config, virtual host)
			Sets the request scheme, hostname and port that the server uses to identify itself. ServerName is used (possibly in Conjuction with ServerAlias, to uniquely identify a virtual host, when 
			using name-based virtual hosts. 

			
			


 [DIRECTORIES]

 /etc/apache2/
 /var/www/html
 /var/lib ?
	/etc/apache2/
	|-- apache2.conf
	| `--  ports.conf
	|-- mods-enabled
	| |-- *.load
	| `-- *.conf
	|-- conf-enabled
	| `-- *.conf
	|-- sites-enabled
	| `-- *.conf
	|-- envvars	
	
